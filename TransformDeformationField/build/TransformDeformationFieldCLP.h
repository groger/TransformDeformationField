// This file was automatically generated by:
//  /opt/local/GenerateCLP/GenerateCLP_linux64_3_20/GenerateCLP --InputXML /biomed-resimg/NAMIC/DTITractographyPhantom/concatenateHfield/src/TransformDeformationField.xml --OutputCxx /biomed-resimg/NAMIC/DTITractographyPhantom/concatenateHfield/build/TransformDeformationFieldCLP.h
//
#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <string.h>
#include <vector>
#include <map>

#include <itksys/ios/sstream>

#include "tclap/CmdLine.h"
#include "ModuleProcessInformation.h"

#ifdef WIN32
#define Module_EXPORT __declspec(dllexport)
#else
#define Module_EXPORT 
#endif

#if defined(main) && !defined(REGISTER_TEST)
// If main defined as a preprocessor symbol, redefine it to the expected entry point.
#undef main
#define main ModuleEntryPoint

extern "C" {
  Module_EXPORT char *GetXMLModuleDescription();
  Module_EXPORT int ModuleEntryPoint(int, char*[]);
}
#endif

extern "C" {
Module_EXPORT char XMLModuleDescription[] = 
"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n"
"<executable>\n"
"  <category>Diffusion.Utilities</category>\n"
"  <title>Concatenation of two deformation field volumes or average of multiple deformation field volumes</title>\n"
"  <license></license>\n"
"  <contributor>Gwendoline Roger, Francois Budin</contributor>\n"
"\n"
"<parameters>\n"
"  <label>Input/Ouput</label>\n"
"  <description>Input/output parameters</description>\n"
"    <image type=\"any\">\n"
"      <name>referenceVolume</name>\n"
"      <label>Reference Volume (To Set Output Parameters)</label>\n"
"      <channel>input</channel>\n"
"      <flag>-R</flag>\n"
"      <longflag>--Reference</longflag>\n"
"      <description>Reference Volume (spacing,size,orientation,origin)</description>\n"
"      <default></default>\n"
"    </image>\n"
"</parameters>\n"
"<parameters>\n"
"  <label>Transform Parameters</label>\n"
"  <description>Parameters used to choose the transform between concatenation and average</description>\n"
"     <string-vector>\n"
"	<name>deffieldtoconcatenate</name>\n"
"	<label>Set the two Deformation Field Volumes to concatenate</label>\n"
"	<channel>input</channel>\n"
"	<longflag>--concatenate</longflag>\n"
"	<default></default>\n"
"     </string-vector>\n"
"    <string-vector>\n"
"	<name>deffieldtoaverage</name>\n"
"	<label>Deformation Field Volumes to average</label>\n"
"	<channel>input</channel>\n"
"	<longflag>--average</longflag>\n"
"	<default></default>\n"
"     </string-vector>\n"
"     <string-vector>\n"
"	 <name>typeOfField</name>\n"
"	 <label>Set if the deformation field is an \"h-Field\" or a \"displacement\" in the same order as you enter your deformation field volumes to average or to concatenate</label>\n"
"	 <channel>input</channel>\n"
"	 <longflag>--hfieldtype</longflag>\n"
"	 <default></default>\n"
"     </string-vector>\n"
"</parameters>\n"
"<parameters>\n"
"    <label>Output parameters</label>\n"
"    <description>Ouput parameters: choose outputHfield if you want a concatenation, choose outputHfieldAvg if you want an average</description>\n"
"    <image type=\"vector\">\n"
"        <name>outputHfield</name>\n"
"        <label>Save the concatenation of deformation field volumes</label>\n"
"        <channel>output</channel>\n"
"        <longflag>--outputHField</longflag>\n"
"        <description>Save transform as an HField (3D vector image containing vectors with 3 components)</description>\n"
"        <default></default>\n"
"     </image>\n"
"     <image type=\"vector\">\n"
"	<name>outputHfieldAvg</name>\n"
"	<label>Save the average of deformation field volumes</label>\n"
"	<longflag>--outputHFieldAvg</longflag>\n"
"	<description>Save transform as an HField (3D vector image containing vectors with 3 components)</description>\n"
"	<default></default>\n"
"     </image>\n"
"</parameters>\n"
"\n"
"\n"
"</executable>\n"
"\n"
;

}

void
splitString (const std::string &text,
             const std::string &separators,
             std::vector<std::string> &words)
{
  const std::string::size_type n = text.length();
  std::string::size_type start = text.find_first_not_of(separators);
  while (start < n)
    {
    std::string::size_type stop = text.find_first_of(separators, start);
    if (stop > n) stop = n;
    words.push_back(text.substr(start, stop - start));
    start = text.find_first_not_of(separators, stop+1);
    }
}

void
splitFilenames (const std::string &text,
                std::vector<std::string> &words)
{
  const std::string::size_type n = text.length();
  bool quoted;
  std::string comma(",");
  std::string quote("\"");
  std::string::size_type start = text.find_first_not_of(comma);
  while (start < n)
    {
    quoted = false;
    std::string::size_type startq = text.find_first_of(quote, start);
    std::string::size_type stopq = text.find_first_of(quote, startq+1);
    std::string::size_type stop = text.find_first_of(comma, start);
    if (stop > n) stop = n;
    if (startq != std::string::npos && stopq != std::string::npos)
      {
      while (startq < stop && stop < stopq && stop != n)
         {
         quoted = true;
         stop = text.find_first_of(comma, stop+1);
         if (stop > n) stop = n;
         }
      }
    if (!quoted)
      {
      words.push_back(text.substr(start, stop - start));
      }
    else
      {
      words.push_back(text.substr(start+1, stop - start-2));
      }
    start = text.find_first_not_of(comma, stop+1);
    }
}

char *GetXMLModuleDescription()
{
   return XMLModuleDescription;
}

#define GENERATE_LOGO
#define GENERATE_XML \
  if (argc >= 2 && (strcmp(argv[1],"--xml") == 0)) \
    { \
    std::cout << GetXMLModuleDescription(); \
    return EXIT_SUCCESS; \
    }
#define GENERATE_TCLAP \
    std::string referenceVolume; \
    std::string deffieldtoconcatenateTemp; \
    std::vector<std::string> deffieldtoconcatenate; \
    std::string deffieldtoaverageTemp; \
    std::vector<std::string> deffieldtoaverage; \
    std::string typeOfFieldTemp; \
    std::vector<std::string> typeOfField; \
    std::string outputHfield; \
    std::string outputHfieldAvg; \
    bool echoSwitch = false; \
    bool xmlSwitch = false; \
    std::string processInformationAddressString = "0"; \
try \
  { \
    std::string fullDescription("Description: "); \
    fullDescription += "No description provided"; \
    if (!std::string("Gwendoline Roger, Francois Budin").empty()) \
      { \
      fullDescription += "\nAuthor(s): Gwendoline Roger, Francois Budin"; \
      } \
    if (!std::string("").empty()) \
      { \
      fullDescription += "\nAcknowledgements: "; \
      } \
    TCLAP::CmdLine commandLine (fullDescription, \
       ' ', \
      "" ); \
 \
      itksys_ios::ostringstream msg; \
    msg.str("");msg << "Reference Volume (spacing,size,orientation,origin)";    TCLAP::ValueArg<std::string > referenceVolumeArg("R", "Reference", msg.str(), 0, referenceVolume, "std::string", commandLine); \
 \
    msg.str("");msg << "";    TCLAP::ValueArg<std::string > deffieldtoconcatenateArg("", "concatenate", msg.str(), 0, deffieldtoconcatenateTemp, "std::vector<std::string>", commandLine); \
 \
    msg.str("");msg << "";    TCLAP::ValueArg<std::string > deffieldtoaverageArg("", "average", msg.str(), 0, deffieldtoaverageTemp, "std::vector<std::string>", commandLine); \
 \
    msg.str("");msg << "";    TCLAP::ValueArg<std::string > typeOfFieldArg("", "hfieldtype", msg.str(), 0, typeOfFieldTemp, "std::vector<std::string>", commandLine); \
 \
    msg.str("");msg << "Save transform as an HField (3D vector image containing vectors with 3 components)";    TCLAP::ValueArg<std::string > outputHfieldArg("", "outputHField", msg.str(), 0, outputHfield, "std::string", commandLine); \
 \
    msg.str("");msg << "Save transform as an HField (3D vector image containing vectors with 3 components)";    TCLAP::ValueArg<std::string > outputHfieldAvgArg("", "outputHFieldAvg", msg.str(), 0, outputHfieldAvg, "std::string", commandLine); \
 \
    msg.str("");msg << "Echo the command line arguments (default: " << echoSwitch << ")"; \
    TCLAP::SwitchArg echoSwitchArg("", "echo", msg.str(), commandLine, echoSwitch); \
 \
    msg.str("");msg << "Produce xml description of command line arguments (default: " << xmlSwitch << ")"; \
    TCLAP::SwitchArg xmlSwitchArg("", "xml", msg.str(), commandLine, xmlSwitch); \
 \
    msg.str("");msg << "Address of a structure to store process information (progress, abort, etc.). (default: " << processInformationAddressString << ")"; \
    TCLAP::ValueArg<std::string > processInformationAddressStringArg("", "processinformationaddress", msg.str(), 0, processInformationAddressString, "std::string", commandLine); \
 \
    /* Build a map of flag aliases to the true flag */ \
    std::map<std::string,std::string> flagAliasMap; \
    std::map<std::string,std::string> deprecatedFlagAliasMap; \
    std::map<std::string,std::string> longFlagAliasMap; \
    std::map<std::string,std::string> deprecatedLongFlagAliasMap; \
    /* Remap flag aliases to the true flag */ \
    std::vector<std::string> targs; \
    std::map<std::string,std::string>::iterator ait; \
    std::map<std::string,std::string>::iterator dait; \
    size_t ac; \
    for (ac=0; ac < static_cast<size_t>(argc); ++ac)  \
       {  \
       if (strlen(argv[ac]) == 2 && argv[ac][0]=='-') \
         { \
         /* short flag case */ \
         std::string tflag(argv[ac], 1, strlen(argv[ac])-1); \
         ait = flagAliasMap.find(tflag); \
         dait = deprecatedFlagAliasMap.find(tflag); \
         if (ait != flagAliasMap.end() || dait != deprecatedFlagAliasMap.end()) \
           { \
           if (ait != flagAliasMap.end()) \
             { \
             /* remap the flag */ \
             targs.push_back("-" + (*ait).second); \
             } \
           else if (dait != deprecatedFlagAliasMap.end()) \
             { \
             std::cout << "Flag \"" << argv[ac] << "\" is deprecated. Please use flag \"-" << (*dait).second << "\" instead. " << std::endl; \
             /* remap the flag */ \
             targs.push_back("-" + (*dait).second); \
             } \
           } \
         else \
           { \
           targs.push_back(argv[ac]); \
           } \
         } \
       else if (strlen(argv[ac]) > 2 && argv[ac][0]=='-' && argv[ac][1]=='-') \
         { \
         /* long flag case */ \
         std::string tflag(argv[ac], 2, strlen(argv[ac])-2); \
         ait = longFlagAliasMap.find(tflag); \
         dait = deprecatedLongFlagAliasMap.find(tflag); \
         if (ait != longFlagAliasMap.end() || dait != deprecatedLongFlagAliasMap.end()) \
           { \
           if (ait != longFlagAliasMap.end()) \
             { \
             /* remap the flag */ \
             targs.push_back("--" + (*ait).second); \
             } \
           else if (dait != deprecatedLongFlagAliasMap.end()) \
             { \
             std::cout << "Long flag \"" << argv[ac] << "\" is deprecated. Please use long flag \"--" << (*dait).second << "\" instead. " << std::endl; \
             /* remap the flag */ \
             targs.push_back("--" + (*dait).second); \
             } \
           } \
         else \
           { \
           targs.push_back(argv[ac]); \
           } \
         } \
       else if (strlen(argv[ac]) > 2 && argv[ac][0]=='-' && argv[ac][1]!='-') \
         { \
         /* short flag case where multiple flags are given at once ala */ \
         /* "ls -ltr" */ \
         std::string tflag(argv[ac], 1, strlen(argv[ac])-1); \
         std::string rflag("-"); \
         for (std::string::size_type fi=0; fi < tflag.size(); ++fi) \
           { \
           std::string tf(tflag, fi, 1); \
           ait = flagAliasMap.find(tf); \
           dait = deprecatedFlagAliasMap.find(tf); \
           if (ait != flagAliasMap.end() || dait != deprecatedFlagAliasMap.end()) \
             { \
             if (ait != flagAliasMap.end()) \
               { \
               /* remap the flag */ \
               rflag += (*ait).second; \
               } \
             else if (dait != deprecatedFlagAliasMap.end()) \
               { \
               std::cout << "Flag \"-" << tf << "\" is deprecated. Please use flag \"-" << (*dait).second << "\" instead. " << std::endl; \
               /* remap the flag */ \
               rflag += (*dait).second; \
               } \
             } \
           else \
             { \
             rflag += tf; \
             } \
           } \
         targs.push_back(rflag); \
         } \
       else \
         { \
         /* skip the argument without remapping (this is the case for any */ \
         /* arguments for flags */ \
         targs.push_back(argv[ac]); \
         } \
       } \
 \
   /* Remap args to a structure that CmdLine::parse() can understand*/ \
   std::vector<char*> vargs; \
   for (ac = 0; ac < targs.size(); ++ac) \
     {  \
     vargs.push_back((char *)targs[ac].c_str()); \
     } \
    commandLine.parse ( vargs.size(), (char**) &(vargs[0]) ); \
    referenceVolume = referenceVolumeArg.getValue(); \
    deffieldtoconcatenateTemp = deffieldtoconcatenateArg.getValue(); \
    deffieldtoaverageTemp = deffieldtoaverageArg.getValue(); \
    typeOfFieldTemp = typeOfFieldArg.getValue(); \
    outputHfield = outputHfieldArg.getValue(); \
    outputHfieldAvg = outputHfieldAvgArg.getValue(); \
    echoSwitch = echoSwitchArg.getValue(); \
    xmlSwitch = xmlSwitchArg.getValue(); \
    processInformationAddressString = processInformationAddressStringArg.getValue(); \
      { /* Assignment for deffieldtoconcatenate */ \
      std::vector<std::string> words; \
      std::string sep(","); \
      splitString(deffieldtoconcatenateTemp, sep, words); \
      for (unsigned int _j = 0; _j < words.size(); _j++) \
        { \
        deffieldtoconcatenate.push_back((words[_j].c_str())); \
        } \
      } \
      { /* Assignment for deffieldtoaverage */ \
      std::vector<std::string> words; \
      std::string sep(","); \
      splitString(deffieldtoaverageTemp, sep, words); \
      for (unsigned int _j = 0; _j < words.size(); _j++) \
        { \
        deffieldtoaverage.push_back((words[_j].c_str())); \
        } \
      } \
      { /* Assignment for typeOfField */ \
      std::vector<std::string> words; \
      std::string sep(","); \
      splitString(typeOfFieldTemp, sep, words); \
      for (unsigned int _j = 0; _j < words.size(); _j++) \
        { \
        typeOfField.push_back((words[_j].c_str())); \
        } \
      } \
  } \
catch ( TCLAP::ArgException e ) \
  { \
  std::cerr << "error: " << e.error() << " for arg " << e.argId() << std::endl; \
  return ( EXIT_FAILURE ); \
  }
#define GENERATE_ECHOARGS \
if (echoSwitch) \
{ \
std::cout << "Command Line Arguments" << std::endl; \
std::cout << "    referenceVolume: " << referenceVolume << std::endl; \
std::cout << "    deffieldtoconcatenate: "; \
for (unsigned int _i =0; _i < deffieldtoconcatenate.size(); _i++) \
{ \
std::cout << deffieldtoconcatenate[_i] << ", "; \
} \
std::cout <<std::endl; \
std::cout << "    deffieldtoaverage: "; \
for (unsigned int _i =0; _i < deffieldtoaverage.size(); _i++) \
{ \
std::cout << deffieldtoaverage[_i] << ", "; \
} \
std::cout <<std::endl; \
std::cout << "    typeOfField: "; \
for (unsigned int _i =0; _i < typeOfField.size(); _i++) \
{ \
std::cout << typeOfField[_i] << ", "; \
} \
std::cout <<std::endl; \
std::cout << "    outputHfield: " << outputHfield << std::endl; \
std::cout << "    outputHfieldAvg: " << outputHfieldAvg << std::endl; \
std::cout << "    echoSwitch: " << echoSwitch << std::endl; \
std::cout << "    xmlSwitch: " << xmlSwitch << std::endl; \
std::cout << "    processInformationAddressString: " << processInformationAddressString << std::endl; \
}
#define GENERATE_ProcessInformationAddressDecoding \
ModuleProcessInformation *CLPProcessInformation = 0; \
if (processInformationAddressString != "") \
{ \
sscanf(processInformationAddressString.c_str(), "%p", &CLPProcessInformation); \
}
#define PARSE_ARGS GENERATE_LOGO;GENERATE_XML;GENERATE_TCLAP;GENERATE_ECHOARGS;GENERATE_ProcessInformationAddressDecoding;
